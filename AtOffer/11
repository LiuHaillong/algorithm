class Solution {
public:
     int  NumberOf1(int n) {
         int sum = 0;
         for(int i = 0; i < 32; i++){
             sum += n & 1;
             n >>= 1;
         }
         return sum;
     }
};
//举例
//15的2进制n=1111(1*2^3+1*2^2+1*2^1+1*2^0)
//sum += n & 1 =>> n&0001 = 1 --->sum+=n&1 == 1
//n>>=1 ====> n = 0111 & 0001 = 1 --->sum+=n&1 == 2
//n>>=1 ====> n = 0011 & 0001 = 1 --->sum+=n&1 == 3
//n>>=1 ====> n = 0001 & 0001 = 1 --->sum+=n&1 == 4
//所以结果是4,遇到这种类似进制的问题,就要考虑和一些0 1 进制进行测试,就过了
